version: '3.8'

services:
  # Backend service
  backend:
    build: ./backend
    container_name: secura-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
      - "443:443"
    environment:
      - NODE_ENV=production
      - PORT=5000
      - JWT_SECRET=${JWT_SECRET}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY}
      - DB_HOST=db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - CORS_ORIGIN=http://localhost:3000
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/config:/app/config
      - ./certs:/app/certs
    depends_on:
      - db
    networks:
      - app-network

  # Frontend service
  frontend:
    build: ./frontend
    container_name: secura-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
      - "443:443"
    depends_on:
      - backend
    volumes:
      - ./certs:/app/certs
    networks:
      - app-network

  # Database service
  db:
    image: mysql:8.0
    container_name: secura-db
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - db-data:/var/lib/mysql
      - ./database/database-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
      - ./database/database-indexes.sql:/docker-entrypoint-initdb.d/02-indexes.sql
    networks:
      - app-network

  # Backup service
  backup:
    build:
      context: ./
      dockerfile: ./scripts/Dockerfile.backup
    container_name: secura-backup
    restart: unless-stopped
    volumes:
      - ./backups:/backups
    depends_on:
      - db
    environment:
      - DB_HOST=db
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - BACKUP_SCHEDULE="0 0 * * *" # Daily at midnight
    networks:
      - app-network

  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - app
    networks:
      - app-network

  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  db-data:

networks:
  app-network:
    driver: bridge

